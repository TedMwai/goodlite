import Cart from "@/components/Cart";
import MobileNav from "@/components/MobileNav";
import SearchComponent from "@/components/Search";
import { useShop } from "@/context/context";
import prisma from "@/lib/prisma";
import { Cart as CartType, Products } from "@/types/types";
import { myFetch } from "@/util/fetch";
import { AnimatePresence } from "framer-motion";
import { GetStaticPaths, GetStaticProps } from "next";
import { Montserrat } from "next/font/google";
import Head from "next/head";
import Image from "next/image";
import Link from "next/link";
import { ParsedUrlQuery } from "querystring";

interface Props {
  products: Products;
}

const montserrat = Montserrat({
  subsets: ["latin"],
  weight: ["400", "500", "600", "700"],
});

const Collection = ({ products }: Props) => {
  const { cartOpen, sideNav, setCart, setCartOpen, searchOpen } = useShop();

  const handleOpenCart = () => {
    setCartOpen(true);
    // Disables Background Scrolling whilst the SideDrawer/Modal is open
    if (typeof window != "undefined" && window.document) {
      document.body.classList.add("overflow-y-hidden");
    }
  };

  const addToCart = async (id: number) => {
    try {
      const res = await myFetch("/api/cart/addToCart", {
        method: "POST",
        body: JSON.stringify({ productId: id, quantity: 1 }),
      });
      const cartItems: CartType = await res.json();
      setCart(cartItems);
      handleOpenCart();
    } catch (error: unknown) {
      console.log("Unable to add product to cart", error);
    }
  };
  return (
    <>
      <Head>
        <title>Goodlite</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <main className={montserrat.className}>
          <AnimatePresence>
            {cartOpen && <Cart />}
            {sideNav && <MobileNav />}
            {searchOpen && <SearchComponent />}
          </AnimatePresence>
          <div className="px-5 py-12 mx-auto md:px-12 lg:px-16">
            <div className="grid grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-x-6 gap-y-20 xl:gap-x-4 xl:gap-y-12">
              {products.map((product) => (
                <div className="cursor-pointer" key={product.id}>
                  <Link href={`/product/${product.productSlug}`}>
                    <div className="relative w-44 h-44 md:w-56 md:h-56 lg:w-fit lg:h-[18rem] xl:h-[19rem] aspect-square overflow-hidden">
                      <Image
                        src={product.coverImage}
                        alt="hero"
                        fill={true}
                        className="w-full h-full object-cover object-center lg:hover:scale-125 transition duration-300 ease-in-out"
                      />
                    </div>
                  </Link>
                  <div className="mt-3 xl:mt-6">
                    <Link
                      className="w-fit border-a-expand text-base pt-2 pb-1"
                      href={`/product/${product.productSlug}`}
                    >
                      {product.name}
                    </Link>
                    <div className="flex gap-8">
                      {product.discount !== null && (
                        <h3
                          className={`hidden md:block text-[#123026] ${
                            product.discountId && "line-through text-gray-500"
                          }`}
                        >
                          Ksh {product.price}
                        </h3>
                      )}
                      <h3 className="text-[#123026]">
                        Ksh{" "}
                        {product.discount !== null
                          ? product.discount.discount
                          : product.price}
                        .00
                      </h3>
                    </div>
                    <button
                      className="mt-2 xl:mt-4 bg-[#123026] text-white py-2 px-4 rounded-full w-full md:w-fit hover:bg-[#1e4f3f] transition duration-300 ease-in-out"
                      onClick={() => addToCart(product.id)}
                    >
                      Add to cart
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </main>
      </div>
    </>
  );
};

export default Collection;

export const getStaticProps: GetStaticProps = async (context) => {
  const { slug } = context.params as ParsedUrlQuery;
  const products = await prisma.products.findMany({
    where: {
      category: {
        categorySlug: slug as string,
      },
    },
    include: {
      images: {
        select: {
          image: true,
        },
      },
      category: {
        select: {
          id: true,
          name: true,
        },
      },
      discount: {
        select: {
          discount: true,
        },
      },
    },
  });

  return {
    props: {
      products: JSON.parse(JSON.stringify(products)),
    },
  };
};

export const getStaticPaths: GetStaticPaths = async () => {
  const categories = await prisma.category.findMany({
    select: {
      categorySlug: true,
    },
  });

  const paths = categories.map((category) => ({
    params: { slug: category.categorySlug },
  }));

  return { paths, fallback: "blocking" }; // Set fallback to 'blocking' for ISR
};
