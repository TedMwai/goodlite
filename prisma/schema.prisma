generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  DELIVERED
  CANCELLED
}

enum PAYMENT_STATUS {
  PENDING
  SUCCESS
  FAILED
}

model Category {
  id           Int        @id @default(autoincrement())
  name         String
  description  String     @db.VarChar(500)
  categorySlug String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  products     Products[]
}

model Products {
  id          Int          @id @default(autoincrement())
  name        String
  description String       @db.VarChar(500)
  categoryId  Int
  quantity    Int
  price       Float
  discountId  Int?
  productSlug String       @unique @db.VarChar(150)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  coverImage  String
  category    Category     @relation(fields: [categoryId], references: [id])
  discount    Discount?    @relation(fields: [discountId], references: [id])
  images      Images[]
  cart        Cart[]
  orderItems  OrderItems[]

  @@index(categoryId)
  @@index(discountId)
}

model Discount {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  discount    Float
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Products[]
}

model Images {
  id        Int      @id @default(autoincrement())
  productId Int
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Products @relation(fields: [productId], references: [id])

  @@index(productId)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          String         @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  addresses     Addresses[]
  cart          Cart[]
  orderDetails  OrderDetails[]
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  product   Products @relation(fields: [productId], references: [id])

  @@index(userId)
  @@index(productId)
}

model OrderDetails {
  id                String         @id @default(cuid())
  userId            String
  total             Float
  paymentId         String
  phone             BigInt
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  regionId          Int
  checkoutRequestID String         @unique
  paymentStatus     PAYMENT_STATUS @default(PENDING)
  orderStatus       ORDER_STATUS   @default(PENDING)
  user              User           @relation(fields: [userId], references: [id])
  region            Region         @relation(fields: [regionId], references: [id])
  orderItems        OrderItems[]

  @@index(userId)
  @@index(regionId)
}

model OrderItems {
  id           String       @id @default(cuid())
  orderId      String
  productId    Int
  quantity     Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orderDetails OrderDetails @relation(fields: [orderId], references: [id])
  product      Products     @relation(fields: [productId], references: [id])

  @@index(orderId)
  @@index(productId)
}

model Addresses {
  id         String   @id @default(cuid())
  userId     String
  firstName  String
  lastName   String
  address    String   @db.VarChar(500)
  apartment  String   @db.VarChar(500)
  city       String   @db.VarChar(500)
  postalCode String?
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])

  @@index(userId)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@index(userId)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@index(userId)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Region {
  id        Int            @id @default(autoincrement())
  name      String         @db.VarChar(500)
  amount    Float
  createdAt DateTime       @default(now())
  order     OrderDetails[]
}
