generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                 String  @id
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               users   @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model cart {
  id        String   @id
  userId    String
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  products  products @relation(fields: [productId], references: [id], map: "Cart_productId_fkey")
  user      users    @relation(fields: [userId], references: [id], map: "Cart_userId_fkey")

  @@index([productId], map: "Cart_productId_fkey")
  @@index([userId], map: "Cart_userId_fkey")
}

model category {
  id           Int        @id @default(autoincrement())
  name         String
  description  String     @db.VarChar(500)
  categorySlug String     @unique(map: "Category_categorySlug_key")
  createdAt    DateTime   @default(now())
  updatedAt    DateTime
  products     products[]
}

model products {
  id          Int          @id @default(autoincrement())
  name        String
  description String       @db.VarChar(500)
  categoryId  Int
  quantity    Int
  price       Float
  discountId  Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime
  coverImage  String
  productSlug String       @unique(map: "Products_productSlug_key") @db.VarChar(150)
  cart        cart[]
  images      images[]
  orderitems  orderitems[]
  category    category     @relation(fields: [categoryId], references: [id], map: "Products_categoryId_fkey")
  discount    discount?    @relation(fields: [discountId], references: [id], map: "Products_discountId_fkey")

  @@index([categoryId], map: "Products_categoryId_fkey")
  @@index([discountId], map: "Products_discountId_fkey")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         users    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

model addresses {
  id         String   @id
  userId     String
  address    String
  city       String
  postalCode String
  phone      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
  users      users    @relation(fields: [userId], references: [id], map: "Addresses_userId_fkey")

  @@index([userId], map: "Addresses_userId_fkey")
}

model discount {
  id          Int        @id @default(autoincrement())
  name        String
  description String
  discount    Float
  active      Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime
  products    products[]
}

model images {
  id        Int      @id @default(autoincrement())
  productId Int
  image     String
  createdAt DateTime @default(now())
  updatedAt DateTime
  products  products @relation(fields: [productId], references: [id], map: "Images_productId_fkey")

  @@index([productId], map: "Images_productId_fkey")
}

model orderdetails {
  id         String       @id
  userId     String
  total      Float
  paymentId  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime
  users      users        @relation(fields: [userId], references: [id], map: "OrderDetails_userId_fkey")
  orderitems orderitems[]

  @@index([userId], map: "OrderDetails_userId_fkey")
}

model orderitems {
  id           String       @id
  orderId      String
  productId    Int
  quantity     Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  orderdetails orderdetails @relation(fields: [orderId], references: [id], map: "OrderItems_orderId_fkey")
  products     products     @relation(fields: [productId], references: [id], map: "OrderItems_productId_fkey")

  @@index([orderId], map: "OrderItems_orderId_fkey")
  @@index([productId], map: "OrderItems_productId_fkey")
}

model users {
  id            String         @id
  name          String?
  email         String?        @unique(map: "Users_email_key")
  emailVerified DateTime?
  image         String?
  role          String         @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  account       account[]
  addresses     addresses[]
  cart          cart[]
  orderdetails  orderdetails[]
  session       session[]
}
